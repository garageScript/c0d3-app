generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Session {
  id        String   @id
  sid       String   @unique(map: "Session.sid_unique")
  data      String
  expiresAt DateTime
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}

model Alert {
  id         Int      @id @default(autoincrement())
  text       String?  @db.VarChar(255)
  type       String?  @db.VarChar(255)
  url        String?  @db.VarChar(255)
  urlCaption String?  @db.VarChar(255)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)

  @@map("alerts")
}

model Challenge {
  id          Int          @id @default(autoincrement())
  description String
  title       String       @db.VarChar(255)
  order       Int
  createdAt   DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime     @updatedAt @db.Timestamptz(6)
  lessonId    Int
  lesson      Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade, map: "challenges_lessonId_fk")
  submissions Submission[]

  @@map("challenges")
}

model Lesson {
  id          Int          @id @default(autoincrement())
  description String
  docUrl      String?      @db.VarChar(255)
  githubUrl   String?      @db.VarChar(255)
  videoUrl    String?      @db.VarChar(255)
  order       Int
  title       String       @db.VarChar(255)
  createdAt   DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime     @updatedAt @db.Timestamptz(6)
  chatUrl     String?      @db.VarChar(255)
  slug        String       @unique(map: "lessons.slug_unique") @db.VarChar(50)
  challenges  Challenge[]
  modules     Module[]
  starLesson  Star[]       @relation("starLesson")
  submissions Submission[]
  userLessons UserLesson[]

  @@map("lessons")
}

model Star {
  id        Int      @id @default(autoincrement())
  lessonId  Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  studentId Int
  mentorId  Int
  comment   String?  @db.VarChar(255)
  lesson    Lesson   @relation("starLesson", fields: [lessonId], references: [id], onDelete: Cascade)
  mentor    User     @relation("starMentor", fields: [mentorId], references: [id], onDelete: Cascade)
  student   User     @relation("starStudent", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, lessonId], map: "stars.studentId_lessonId_unique")
  @@map("stars")
}

model Submission {
  id          Int       @id @default(autoincrement())
  diff        String?
  comment     String?
  status      String    @default("open") @db.VarChar(255)
  viewCount   Int?      @default(0)
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @db.Timestamptz(6)
  userId      Int
  reviewerId  Int?
  challengeId Int
  lessonId    Int
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  reviewer    User?     @relation("userReviewedSubmissions", fields: [reviewerId], references: [id])
  user        User      @relation("userSubmissions", fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]

  @@map("submissions")
}

model Comment {
  id           Int        @id @default(autoincrement())
  fileName     String?
  line         Int?
  content      String
  authorId     Int
  submissionId Int
  createdAt    DateTime   @default(now())
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model UserLesson {
  passedAt  DateTime? @db.Timestamptz(6)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  lessonId  Int
  userId    Int
  lesson    Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([lessonId, userId])
  @@map("userLessons")
}

model User {
  id                        Int          @id @default(autoincrement())
  name                      String       @db.VarChar(255)
  username                  String       @db.VarChar(255)
  password                  String?      @db.VarChar(255)
  email                     String       @db.VarChar(255)
  gsId                      Int?
  isOnline                  Boolean?
  createdAt                 DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime     @updatedAt @db.Timestamptz(6)
  isAdmin                   Boolean      @default(false)
  forgotToken               String?      @db.VarChar(255)
  cliToken                  String?      @db.VarChar(255)
  emailVerificationToken    String?      @db.VarChar(255)
  tokenExpiration           DateTime?    @db.Timestamptz(6)
  discordRefreshToken       String?      @db.VarChar(255)
  discordAccessToken        String?      @db.VarChar(255)
  discordAccessTokenExpires DateTime?    @db.Timestamptz(6)
  discordId                 String?      @db.VarChar(255)
  cliVersion                String?      @db.VarChar(255)
  comments                  Comment[]
  exercises                 Exercise[]
  Exercise                  Exercise[]   @relation("flaggedExercises")
  modules                   Module[]
  starsMentor               Star[]       @relation("starMentor")
  starsGiven                Star[]       @relation("starStudent")
  submissionsReviewed       Submission[] @relation("userReviewedSubmissions")
  submissions               Submission[] @relation("userSubmissions")
  userLessons               UserLesson[]

  @@map("users")
}

model Module {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt @db.Timestamptz(6)
  authorId  Int
  lessonId  Int
  name      String     @db.VarChar(255)
  content   String
  order     Int
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  exercises Exercise[]

  @@map("modules")
}

model Exercise {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @db.Timestamptz(6)
  authorId    Int
  moduleId    Int
  description String
  answer      String
  testStr     String?
  explanation String?
  flagReason  String?
  flaggedAt   DateTime?
  flaggedById Int?
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  flaggedBy   User?     @relation("flaggedExercises", fields: [flaggedById], references: [id])
  module      Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("exercises")
}
